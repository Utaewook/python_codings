
입력 및 라이브러리들
1. import sys
   input = sys.stdin.readline
   사용 하여 빠른 입력으로 바꾸기
2. itertools에 유용한 순열, 조합 함수들이 있음
 사용 가능한 코딩 테스트라면 이용해보자

문제 풀이
1. dynamic programming 적용(점화식 세우기)
2. 분할 정복법 적용

반복문
1. 


문자열 / 배열
1. 정규형을 활용하면 성능이 더 좋은 코드를 만들수 있다.(import re)
2. 내장 함수 적극 활용 (replace, index, reverse 등등...)
3. 개체를 배열에서 움직이는 문제가 꽤 있는데, 이같은 경우엔 이동할 방향 (동서남북 4방향 혹은 대각선까지 8방향)을 미리 다른 배열에 매핑 해두고
   그 배열로 이동하는 동작을 구현하는 것이 일반적이며 효율적이다.
4. 마찬가지로, 코드에서 몇가지 경우들을 나누어 수행하는 동작이 있을 경우, 배열로 미리 매핑해둔 후 사용하는 것이 좋다.
5. 배열을 거꾸로 탐색해가며 해결 해야 하는 경우도 있다.
6. 배열의 행과 열을 바꾸어서 해결 해야 하는 경우도 있다. ex> 2행 7열 -> 7행 2열

dfs/bfs
1. 재귀적으로 구현 가능 연결 요소의 갯수 세기도 가능하다.
2. 그래프의 경우 2차원 배열을 만들어 경로의 거리를 포함해서 구현 가능 graph[a].append((b,cost));graph[b].append((a,cost))
3. 그래프의 사이클 여부 판별은 두개의 리스트(방문 여부, 처리 완료)의 True처리 하며 만약 방문여부가 True 인데 처리완료가 False인 노드가 있다면 그 노드 부터 사이클이 시작됨을 알 수있다.

그 외의 특수한 경우들
1. 피보나치 수열의 0이 나오는 횟수는 fib(n-1), 1이 나오는 횟수는 fib(n)와 같다.